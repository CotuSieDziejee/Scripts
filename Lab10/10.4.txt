kamil@kamil-Lenovo-G700:~/Pulpit/10/10.1$ cat newton.cpp.gcov
        -:    0:Source:newton.cpp
        -:    0:Graph:newton.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include <iostream>
        -:    2:#include <cmath>
        -:    3:#include <cfloat>
        -:    4:#include <cstdlib>
        -:    5:
        -:    6:using namespace std;
        -:    7:
        -:    8:
    #####:    9:double newton(unsigned n, double x, double eps, double epsF,
        -:   10:	      double (*F) (double), double (*P) (double)) {
        -:   11:			
    #####:   12:  for (unsigned i = 0; i < n; ++i) {
    #####:   13:    double dx = F(x)/P(x);
    #####:   14:    x -= dx;
    #####:   15:    if (fabs(dx) < eps || fabs(F(x)) < epsF) {
    #####:   16:      break;
        -:   17:    }
        -:   18:  }
    #####:   19:  return x;
        -:   20:}
        -:   21:
    #####:   22:inline double funkcja(double x) {
    #####:   23:  return sqrt(x) - 2.0;
        -:   24:}
        -:   25:
    #####:   26:inline double pochodna(double x) {
    #####:   27:  return 1.0/(2.0*sqrt(x));
        -:   28:}
        -:   29:
        -:   30:
    #####:   31:int main(int argc, char* argv[]) {
    #####:   32:  if (argc > 2) {
    #####:   33:    unsigned int iteracje = atoi(argv[1]);
    #####:   34:    double start = atof(argv[2]);
    #####:   35:    double wynik = newton(iteracje, start, 1.0e-6, 1.0e-5, funkcja, pochodna);
    #####:   36:    cout << "Rezultat: " << wynik << endl;
        -:   37:  } else {
    #####:   38:    cerr << "./program maks_liczba_iteracji punkt_startowy\n";
        -:   39:  }
    #####:   40:  return 0;
    #####:   41:}

